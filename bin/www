var app = require('../app')
const cluster = require('cluster')
const os = require('os')
var debug = require('debug')('rongohouse-backend:server')
var http = require('http')
var port = normalizePort(process.env.PORT || '3000')

if (cluster.isMaster) {
  const cpuCount = os.cpus().length

  for (let j = 0; j < cpuCount; j++) {
    cluster.fork()
  }
} else {
  app.set('port', port)
  var server = http.createServer(app)
  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)
}

cluster.on('exit', function (worker) {
  console.log(`Worker ${worker.id} died'`)
  console.log(`Staring a new one...`)
  cluster.fork()
})

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    return port
  }

  return false
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
